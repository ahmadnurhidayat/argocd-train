name: CI/CD Pipeline for Image Build and Update Deployment with ArgoCD
on:
  release:
    types: [published]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.event.release.tag_name }}

permissions:
  contents: write
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lowercase Repository Name
        run: |
          echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Determine Image Tag
        run: |
          echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "IMAGE_TAG: $IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-summary:
    name: Generate Summary for GitHub Actions
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Calculate new tag based on release tag
        run: |
          CURRENT_TAG="${{ env.IMAGE_TAG }}"
          MAJOR=$(echo "$CURRENT_TAG" | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo "$CURRENT_TAG" | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_TAG="v${MAJOR}.${NEW_MINOR}"
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Create Summary for GitHub Actions
        run: |
          echo "##  Docker Image Built and Pushed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag:** ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Incremental Tag:** ${{ env.new_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Container Registry URL:** [View Image](https://ghcr.io/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  update-argocd:
    name: Update Deployment File in `argocd-train` Repository
    runs-on: ubuntu-latest
    needs: generate-summary
    steps:
      - name: Clone Target Repository (`argocd-train`)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git clone https://ahmadnurhidayat:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git argocd-train
          cd argocd-train
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Update Deployment File in `argocd-train`
        run: |
          cd argocd-train

          if [ ! -f k8s/deployment.yaml ]; then
            echo "‚ùå File k8s/deployment.yaml not found."
            exit 1
          fi

          sed -i "s|image: ghcr.io/${{ github.repository }}.*|image: ghcr.io/${{ github.repository }}:${{ env.new_tag }}|g" k8s/deployment.yaml

      - name: Commit and Push Changes to `argocd-train` Repository
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cd argocd-train
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add k8s/deployment.yaml
            git commit -m "Updated deployment with new image tag: ${{ env.new_tag }}"
            git push https://ahmadnurhidayat:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
          fi

  # notify-teams:
  #   runs-on: ubuntu-latest
  #   needs: [ build-and-push-images, update-argocd ]
  #   if: always()
  #   steps:
  #     - name: Send Teams Notification on Success
  #       if: ${{ success() && needs.build-and-push-images.result == 'success' && needs.update-argocd.result == 'success' }}
  #       run: |
  #         curl -H 'Content-Type: application/json' -d '{
  #           "@type": "MessageCard",
  #           "@context": "https://schema.org/extensions",
  #           "summary": "GitHub Actions Workflow Completed",
  #           "themeColor": "00FF00",
  #           "title": "  Build & Deployment Successful",
  #           "text": "**Repository:** algn48/node-todo\n**New Tag:** ${{ env.new_tag }}\n[View Docker Hub](https://hub.docker.com/r/algn48/node-todo)"
  #         }' ${{ secrets.TEAMS_WEBHOOK_URL }}

  #     - name: Send Teams Notification on Failure
  #       if: ${{ failure() || needs.build-and-push-images.result != 'success' || needs.update-argocd.result != 'success' }}
  #       run: |
  #         curl -H 'Content-Type: application/json' -d '{
  #           "@type": "MessageCard",
  #           "@context": "https://schema.org/extensions",
  #           "summary": "GitHub Actions Workflow Failed",
  #           "themeColor": "FF0000",
  #           "title": "  Build & Deployment Failed",
  #           "text": "Check GitHub Actions for details."
  #         }' ${{ secrets.TEAMS_WEBHOOK_URL }}
  