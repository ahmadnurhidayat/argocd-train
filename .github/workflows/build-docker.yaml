name: Build and Publish Image to Docker Hub

on:
  push:
    branches:
    - main

permissions:
  contents: write

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker Image
      run: |
        docker build -t aalgn48/node-todo:latest .  

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "algn48" --password-stdin

    - name: Get Latest Tag from Docker Hub and Increment
      id: get_tag
      run: |
        LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/algn48/node-todo/tags/?page_size=1" | jq -r '.results[0].name' | grep -Eo '[0-9]+' || echo 0)
        NEW_TAG=$((LATEST_TAG + 1))
        echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

    - name: Push Image to Docker Hub
      run: |
        docker tag algn48/node-todo:latest algn48/node-todo:${{ env.new_tag }}
        docker push algn48/node-todo:${{ env.new_tag }}

  generate-summary:
    runs-on: ubuntu-latest
    needs: build-and-push-images
    steps:
    - name: Get Latest Tag from Docker Hub and Increment
      id: get_tag
      run: |
        LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/algn48/node-todo/tags/?page_size=1" | jq -r '.results[0].name' | grep -Eo '[0-9]+' || echo 0)
        NEW_TAG=$((LATEST_TAG ))
        echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
    - name: Create Summary for GitHub Actions
      run: |
        echo "## ✅ Docker Image Built and Pushed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** algn48/node-todo" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Tag:** latest" >> $GITHUB_STEP_SUMMARY
        echo "- **New Incremental Tag:** ${{ env.new_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Hub URL:** [View Image](https://hub.docker.com/r/algn48/node-todo)" >> $GITHUB_STEP_SUMMARY

  update-argocd:
    runs-on: ubuntu-latest
    needs: generate-summary
    steps:
    - name: Clone Target Repository (`argocd-example-apps`)
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        git clone https://gAhmedg:${GH_TOKEN}@github.com/gAhmedg/argocd-example-apps.git target-repo
        cd target-repo
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Get Latest Tag from Docker Hub and Increment
      id: get_tag
      run: |
        LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/algn48/node-todo/tags/?page_size=1" | jq -r '.results[0].name' | grep -Eo '[0-9]+' || echo 0)
        NEW_TAG=$((LATEST_TAG ))
        echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

    - name: Update Deployment File in `argocd-example-apps`
      run: |
        cd target-repo
        sed -i "s|image: algn48/node-todo:.*|image: algn48/node-todo:${{ env.new_tag }}|g" k8s/deployment.yaml

    - name: Commit and Push Changes to `argocd-example-apps`
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        cd target-repo
        git add k8s/deployment.yaml
        git commit -m "Updated deployment with new image tag: ${{ env.new_tag }}"
        git push https://gAhmedg:${GH_TOKEN}@github.com/gAhmedg/argocd-example-apps.git main

  notify-teams:
    runs-on: ubuntu-latest
    needs: [ build-and-push-images, update-argocd ]
    if: always()
    steps:
    - name: Send Teams Notification on Success
      if: ${{ success() && needs.build-and-push-images.result == 'success' && needs.update-argocd.result == 'success' }}
      run: |
        curl -H 'Content-Type: application/json' -d '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "GitHub Actions Workflow Completed",
          "themeColor": "00FF00",
          "title": "✅ Build & Deployment Successful",
          "text": "**Repository:** algn48/node-todo\n**New Tag:** ${{ env.new_tag }}\n[View Docker Hub](https://hub.docker.com/r/algn48/node-todo)"
        }' ${{ secrets.TEAMS_WEBHOOK_URL }}

    - name: Send Teams Notification on Failure
      if: ${{ failure() || needs.build-and-push-images.result != 'success' || needs.update-argocd.result != 'success' }}
      run: |
        curl -H 'Content-Type: application/json' -d '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "GitHub Actions Workflow Failed",
          "themeColor": "FF0000",
          "title": "❌ Build & Deployment Failed",
          "text": "Check GitHub Actions for details."
        }' ${{ secrets.TEAMS_WEBHOOK_URL }}
